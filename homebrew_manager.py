#!/usr/bin/env python3
"""
Homebrew Manager GUI - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Homebrew –Ω–∞ macOS
–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å Homebrew, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–∞–∫–µ—Ç—ã, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import subprocess
import threading
import queue
import re
import sys
import os

class HomebrewManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Homebrew Manager")
        self.root.geometry("800x600")

        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI –∏–∑ –ø–æ—Ç–æ–∫–æ–≤
        self.output_queue = queue.Queue()

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False

        self.create_widgets()
        self.check_homebrew_installation()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –≤—ã–≤–æ–¥–∞
        self.root.after(100, self.process_queue)

    def create_widgets(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(2, weight=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="Homebrew Manager",
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, pady=(0, 20))

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        button_frame.columnconfigure((0, 1, 2), weight=1)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.update_btn = ttk.Button(button_frame, text="–û–±–Ω–æ–≤–∏—Ç—å Homebrew",
                                    command=self.update_homebrew)
        self.update_btn.grid(row=0, column=0, padx=5, pady=5, sticky=(tk.W, tk.E))

        self.doctor_btn = ttk.Button(button_frame, text="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                                    command=self.run_doctor)
        self.doctor_btn.grid(row=0, column=1, padx=5, pady=5, sticky=(tk.W, tk.E))

        self.cleanup_btn = ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∫–∞",
                                     command=self.cleanup_homebrew)
        self.cleanup_btn.grid(row=0, column=2, padx=5, pady=5, sticky=(tk.W, tk.E))

        self.upgrade_btn = ttk.Button(button_frame, text="–û–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã",
                                     command=self.upgrade_packages)
        self.upgrade_btn.grid(row=1, column=0, padx=5, pady=5, sticky=(tk.W, tk.E))

        self.list_btn = ttk.Button(button_frame, text="–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤",
                                  command=self.list_packages)
        self.list_btn.grid(row=1, column=1, padx=5, pady=5, sticky=(tk.W, tk.E))

        self.maintenance_btn = ttk.Button(button_frame, text="–ü–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                                         command=self.full_maintenance)
        self.maintenance_btn.grid(row=1, column=2, padx=5, pady=5, sticky=(tk.W, tk.E))

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞
        output_frame = ttk.LabelFrame(main_frame, text="–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥", padding="5")
        output_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        output_frame.columnconfigure(0, weight=1)
        output_frame.rowconfigure(0, weight=1)

        self.output_text = scrolledtext.ScrolledText(output_frame, height=20,
                                                    font=("Courier", 10))
        self.output_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
        bottom_frame = ttk.Frame(main_frame)
        bottom_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        bottom_frame.columnconfigure(1, weight=1)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.StringVar()
        self.progress_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        self.progress_bar = ttk.Progressbar(bottom_frame, mode='indeterminate')
        self.progress_bar.grid(row=0, column=0, padx=(0, 10))

        self.status_label = ttk.Label(bottom_frame, textvariable=self.progress_var)
        self.status_label.grid(row=0, column=1, sticky=(tk.W))

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_btn = ttk.Button(bottom_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_output)
        clear_btn.grid(row=0, column=2, padx=(10, 0))

    def check_homebrew_installation(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É Homebrew"""
        try:
            result = subprocess.run(['brew', '--version'],
                                  capture_output=True, text=True, check=True)
            self.output_text.insert(tk.END, f"‚úÖ Homebrew —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout}")
            self.output_text.insert(tk.END, f"üì¶ Homebrew {result.stdout.split()[1]}\n")
        except (subprocess.CalledProcessError, FileNotFoundError):
            self.output_text.insert(tk.END, "‚ùå Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω!\n")
            messagebox.showerror("–û—à–∏–±–∫–∞", "Homebrew –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")

    def update_homebrew(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Homebrew"""
        if self.is_running:
            return

        self.start_progress("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Homebrew...")
        thread = threading.Thread(target=self.run_command_thread,
                                 args=(["brew", "update"], "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Homebrew"))
        thread.daemon = True
        thread.start()

    def run_doctor(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É Homebrew"""
        if self.is_running:
            return

        self.start_progress("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Homebrew...")
        thread = threading.Thread(target=self.run_command_thread,
                                 args=(["brew", "doctor"], "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"))
        thread.daemon = True
        thread.start()

    def cleanup_homebrew(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à –∏ —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Homebrew"""
        if self.is_running:
            return

        self.start_progress("–û—á–∏—Å—Ç–∫–∞ Homebrew...")
        commands = [
            (["brew", "cleanup", "--prune=all"], "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π"),
            (["brew", "autoremove"], "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        ]

        thread = threading.Thread(target=self.run_multiple_commands_thread, args=(commands,))
        thread.daemon = True
        thread.start()

    def upgrade_packages(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã"""
        if self.is_running:
            return

        self.start_progress("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤...")
        thread = threading.Thread(target=self.run_command_thread,
                                 args=(["brew", "upgrade"], "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤"))
        thread.daemon = True
        thread.start()

    def list_packages(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        if self.is_running:
            return

        self.start_progress("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...")
        commands = [
            (["brew", "list", "--formula"], "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã"),
            (["brew", "list", "--cask"], "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ cask'–∏")
        ]

        thread = threading.Thread(target=self.run_multiple_commands_thread, args=(commands,))
        thread.daemon = True
        thread.start()

    def full_maintenance(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ Homebrew"""
        if self.is_running:
            return

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = messagebox.askyesno(
            "–ü–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
            "–≠—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Homebrew, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –æ—á–∏—Å—Ç–∫—É.\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )

        if not response:
            return

        self.start_progress("–ü–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ...")
        commands = [
            (["brew", "update"], "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Homebrew"),
            (["brew", "upgrade"], "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤"),
            (["brew", "doctor"], "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
            (["brew", "cleanup", "--prune=all"], "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π"),
            (["brew", "autoremove"], "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        ]

        thread = threading.Thread(target=self.run_multiple_commands_thread, args=(commands,))
        thread.daemon = True
        thread.start()

    def run_command_thread(self, command, description):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.output_queue.put(f"\nüîÑ {description}...\n")

            process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True
            )

            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
            for line in process.stdout:
                self.output_queue.put(line)

            process.wait()

            if process.returncode == 0:
                self.output_queue.put(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n")
            else:
                self.output_queue.put(f"‚ùå {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {process.returncode})\n")
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                self.analyze_error(command, process.returncode)

        except Exception as e:
            self.output_queue.put(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {description}: {str(e)}\n")
        finally:
            self.output_queue.put("COMMAND_FINISHED")

    def run_multiple_commands_thread(self, commands):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
        for command, description in commands:
            try:
                self.output_queue.put(f"\nüîÑ {description}...\n")

                process = subprocess.Popen(
                    command,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    bufsize=1,
                    universal_newlines=True
                )

                for line in process.stdout:
                    self.output_queue.put(line)

                process.wait()

                if process.returncode == 0:
                    self.output_queue.put(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n")
                else:
                    self.output_queue.put(f"‚ùå {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {process.returncode})\n")
                    self.analyze_error(command, process.returncode)

            except Exception as e:
                self.output_queue.put(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {description}: {str(e)}\n")

        self.output_queue.put("COMMAND_FINISHED")

    def analyze_error(self, command, return_code):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è"""
        cmd_str = ' '.join(command)

        suggestions = {
            'brew update': [
                "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à: brew cleanup",
                "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Homebrew"
            ],
            'brew doctor': [
                "üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: sudo chown -R $(whoami) $(brew --prefix)/*",
                "üßπ –û—á–∏—Å—Ç–∏—Ç–µ –∫–µ—à: brew cleanup",
                "üìù –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤—ã—à–µ"
            ],
            'brew upgrade': [
                "üíæ –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ",
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏",
                "üßπ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É: brew cleanup"
            ]
        }

        for cmd_pattern, solutions in suggestions.items():
            if cmd_pattern in cmd_str:
                self.output_queue.put("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n")
                for solution in solutions:
                    self.output_queue.put(f"   {solution}\n")
                break

    def start_progress(self, message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.is_running = True
        self.progress_var.set(message)
        self.progress_bar.start()

        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for widget in [self.update_btn, self.doctor_btn, self.cleanup_btn,
                      self.upgrade_btn, self.list_btn, self.maintenance_btn]:
            widget.configure(state='disabled')

    def stop_progress(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.is_running = False
        self.progress_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.progress_bar.stop()

        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for widget in [self.update_btn, self.doctor_btn, self.cleanup_btn,
                      self.upgrade_btn, self.list_btn, self.maintenance_btn]:
            widget.configure(state='normal')

    def process_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        try:
            while True:
                message = self.output_queue.get_nowait()
                if message == "COMMAND_FINISHED":
                    self.stop_progress()
                else:
                    self.output_text.insert(tk.END, message)
                    self.output_text.see(tk.END)
        except queue.Empty:
            pass
        finally:
            self.root.after(100, self.process_queue)

    def clear_output(self):
        """–û—á–∏—â–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞"""
        self.output_text.delete(1.0, tk.END)

def check_platform():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ macOS"""
    if sys.platform != 'darwin':
        messagebox.showerror("–û—à–∏–±–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
                           "–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è macOS")
        return False
    return True

def main():
    if not check_platform():
        return

    root = tk.Tk()
    app = HomebrewManager(root)
    root.mainloop()

if __name__ == "__main__":
    main()