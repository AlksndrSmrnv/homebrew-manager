#!/usr/bin/env python3
"""
Homebrew Manager GUI - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Homebrew –Ω–∞ macOS
–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å Homebrew, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–∞–∫–µ—Ç—ã, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import subprocess
import threading
import queue
import re
import sys
import os
import json
import urllib.request
import urllib.parse
from datetime import datetime

class HomebrewManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Homebrew Manager")
        self.root.geometry("800x600")

        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI –∏–∑ –ø–æ—Ç–æ–∫–æ–≤
        self.output_queue = queue.Queue()

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False

        self.create_widgets()
        self.check_homebrew_installation()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –≤—ã–≤–æ–¥–∞
        self.root.after(100, self.process_queue)

    def create_widgets(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(2, weight=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="Homebrew Manager",
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, pady=(0, 20))

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        button_frame.columnconfigure((0, 1, 2), weight=1)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.update_btn = ttk.Button(button_frame, text="–û–±–Ω–æ–≤–∏—Ç—å Homebrew",
                                    command=self.update_homebrew)
        self.update_btn.grid(row=0, column=0, padx=5, pady=5, sticky=(tk.W, tk.E))

        self.doctor_btn = ttk.Button(button_frame, text="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                                    command=self.run_doctor)
        self.doctor_btn.grid(row=0, column=1, padx=5, pady=5, sticky=(tk.W, tk.E))

        self.cleanup_btn = ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∫–∞",
                                     command=self.cleanup_homebrew)
        self.cleanup_btn.grid(row=0, column=2, padx=5, pady=5, sticky=(tk.W, tk.E))

        self.upgrade_btn = ttk.Button(button_frame, text="–û–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã",
                                     command=self.upgrade_packages)
        self.upgrade_btn.grid(row=1, column=0, padx=5, pady=5, sticky=(tk.W, tk.E))

        self.list_btn = ttk.Button(button_frame, text="–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤",
                                  command=self.list_packages)
        self.list_btn.grid(row=1, column=1, padx=5, pady=5, sticky=(tk.W, tk.E))

        self.maintenance_btn = ttk.Button(button_frame, text="–ü–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                                         command=self.full_maintenance)
        self.maintenance_btn.grid(row=1, column=2, padx=5, pady=5, sticky=(tk.W, tk.E))

        # –ù–æ–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.size_analysis_btn = ttk.Button(button_frame, text="–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤",
                                           command=self.analyze_package_sizes)
        self.size_analysis_btn.grid(row=2, column=0, padx=5, pady=5, sticky=(tk.W, tk.E))

        self.security_check_btn = ttk.Button(button_frame, text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                                           command=self.security_check)
        self.security_check_btn.grid(row=2, column=1, padx=5, pady=5, sticky=(tk.W, tk.E))

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞
        output_frame = ttk.LabelFrame(main_frame, text="–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥", padding="5")
        output_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        output_frame.columnconfigure(0, weight=1)
        output_frame.rowconfigure(0, weight=1)

        self.output_text = scrolledtext.ScrolledText(output_frame, height=20,
                                                    font=("Courier", 10))
        self.output_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
        bottom_frame = ttk.Frame(main_frame)
        bottom_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        bottom_frame.columnconfigure(1, weight=1)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.StringVar()
        self.progress_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        self.progress_bar = ttk.Progressbar(bottom_frame, mode='indeterminate')
        self.progress_bar.grid(row=0, column=0, padx=(0, 10))

        self.status_label = ttk.Label(bottom_frame, textvariable=self.progress_var)
        self.status_label.grid(row=0, column=1, sticky=(tk.W))

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_btn = ttk.Button(bottom_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_output)
        clear_btn.grid(row=0, column=2, padx=(10, 0))

    def check_homebrew_installation(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É Homebrew"""
        try:
            result = subprocess.run(['brew', '--version'],
                                  capture_output=True, text=True, check=True)
            self.output_text.insert(tk.END, f"‚úÖ Homebrew —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout}")
            self.output_text.insert(tk.END, f"üì¶ Homebrew {result.stdout.split()[1]}\n")
        except (subprocess.CalledProcessError, FileNotFoundError):
            self.output_text.insert(tk.END, "‚ùå Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω!\n")
            messagebox.showerror("–û—à–∏–±–∫–∞", "Homebrew –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")

    def update_homebrew(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Homebrew"""
        if self.is_running:
            return

        self.start_progress("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Homebrew...")
        thread = threading.Thread(target=self.run_command_thread,
                                 args=(["brew", "update"], "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Homebrew"))
        thread.daemon = True
        thread.start()

    def run_doctor(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É Homebrew"""
        if self.is_running:
            return

        self.start_progress("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Homebrew...")
        thread = threading.Thread(target=self.run_command_thread,
                                 args=(["brew", "doctor"], "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"))
        thread.daemon = True
        thread.start()

    def cleanup_homebrew(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à –∏ —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Homebrew"""
        if self.is_running:
            return

        self.start_progress("–û—á–∏—Å—Ç–∫–∞ Homebrew...")
        commands = [
            (["brew", "cleanup", "--prune=all"], "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π"),
            (["brew", "autoremove"], "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        ]

        thread = threading.Thread(target=self.run_multiple_commands_thread, args=(commands,))
        thread.daemon = True
        thread.start()

    def upgrade_packages(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã"""
        if self.is_running:
            return

        self.start_progress("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤...")
        thread = threading.Thread(target=self.run_command_thread,
                                 args=(["brew", "upgrade"], "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤"))
        thread.daemon = True
        thread.start()

    def list_packages(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        if self.is_running:
            return

        self.start_progress("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...")
        commands = [
            (["brew", "list", "--formula"], "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã"),
            (["brew", "list", "--cask"], "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ cask'–∏")
        ]

        thread = threading.Thread(target=self.run_multiple_commands_thread, args=(commands,))
        thread.daemon = True
        thread.start()

    def full_maintenance(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ Homebrew"""
        if self.is_running:
            return

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = messagebox.askyesno(
            "–ü–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
            "–≠—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Homebrew, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –æ—á–∏—Å—Ç–∫—É.\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )

        if not response:
            return

        self.start_progress("–ü–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ...")
        commands = [
            (["brew", "update"], "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Homebrew"),
            (["brew", "upgrade"], "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤"),
            (["brew", "doctor"], "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
            (["brew", "cleanup", "--prune=all"], "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π"),
            (["brew", "autoremove"], "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        ]

        thread = threading.Thread(target=self.run_multiple_commands_thread, args=(commands,))
        thread.daemon = True
        thread.start()

    def run_command_thread(self, command, description):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.output_queue.put(f"\nüîÑ {description}...\n")

            process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True
            )

            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
            for line in process.stdout:
                self.output_queue.put(line)

            process.wait()

            if process.returncode == 0:
                self.output_queue.put(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n")
            else:
                self.output_queue.put(f"‚ùå {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {process.returncode})\n")
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                self.analyze_error(command, process.returncode)

        except Exception as e:
            self.output_queue.put(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {description}: {str(e)}\n")
        finally:
            self.output_queue.put("COMMAND_FINISHED")

    def run_multiple_commands_thread(self, commands):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
        for command, description in commands:
            try:
                self.output_queue.put(f"\nüîÑ {description}...\n")

                process = subprocess.Popen(
                    command,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    bufsize=1,
                    universal_newlines=True
                )

                for line in process.stdout:
                    self.output_queue.put(line)

                process.wait()

                if process.returncode == 0:
                    self.output_queue.put(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n")
                else:
                    self.output_queue.put(f"‚ùå {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {process.returncode})\n")
                    self.analyze_error(command, process.returncode)

            except Exception as e:
                self.output_queue.put(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {description}: {str(e)}\n")

        self.output_queue.put("COMMAND_FINISHED")

    def analyze_error(self, command, return_code):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è"""
        cmd_str = ' '.join(command)

        suggestions = {
            'brew update': [
                "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à: brew cleanup",
                "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Homebrew"
            ],
            'brew doctor': [
                "üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: sudo chown -R $(whoami) $(brew --prefix)/*",
                "üßπ –û—á–∏—Å—Ç–∏—Ç–µ –∫–µ—à: brew cleanup",
                "üìù –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤—ã—à–µ"
            ],
            'brew upgrade': [
                "üíæ –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ",
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏",
                "üßπ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É: brew cleanup"
            ]
        }

        for cmd_pattern, solutions in suggestions.items():
            if cmd_pattern in cmd_str:
                self.output_queue.put("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n")
                for solution in solutions:
                    self.output_queue.put(f"   {solution}\n")
                break

    def start_progress(self, message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.is_running = True
        self.progress_var.set(message)
        self.progress_bar.start()

        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for widget in [self.update_btn, self.doctor_btn, self.cleanup_btn,
                      self.upgrade_btn, self.list_btn, self.maintenance_btn,
                      self.size_analysis_btn, self.security_check_btn]:
            widget.configure(state='disabled')

    def stop_progress(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.is_running = False
        self.progress_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.progress_bar.stop()

        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for widget in [self.update_btn, self.doctor_btn, self.cleanup_btn,
                      self.upgrade_btn, self.list_btn, self.maintenance_btn,
                      self.size_analysis_btn, self.security_check_btn]:
            widget.configure(state='normal')

    def process_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        try:
            while True:
                message = self.output_queue.get_nowait()
                if message == "COMMAND_FINISHED":
                    self.stop_progress()
                else:
                    self.output_text.insert(tk.END, message)
                    self.output_text.see(tk.END)
        except queue.Empty:
            pass
        finally:
            self.root.after(100, self.process_queue)

    def clear_output(self):
        """–û—á–∏—â–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞"""
        self.output_text.delete(1.0, tk.END)

    def analyze_package_sizes(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        if self.is_running:
            return

        self.start_progress("–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–∞–∫–µ—Ç–æ–≤...")
        thread = threading.Thread(target=self.analyze_sizes_thread)
        thread.daemon = True
        thread.start()

    def analyze_sizes_thread(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –ø–∞–∫–µ—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.output_queue.put("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...\n")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            process = subprocess.run(["brew", "list", "--formula"],
                                   capture_output=True, text=True, check=True)
            packages = [pkg.strip() for pkg in process.stdout.strip().split('\n') if pkg.strip()]

            if not packages:
                self.output_queue.put("üì¶ –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤\n")
                self.output_queue.put("COMMAND_FINISHED")
                return

            package_sizes = []
            self.output_queue.put(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(packages)} –ø–∞–∫–µ—Ç–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–º–µ—Ä—ã...\n\n")

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –ø—É—Ç—å –∫ Homebrew
            prefix_process = subprocess.run(["brew", "--prefix"],
                                          capture_output=True, text=True, check=True)
            brew_prefix = prefix_process.stdout.strip()
            cellar_path = f"{brew_prefix}/Cellar"

            for i, package in enumerate(packages):
                try:
                    # –ü—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É –≤ Cellar
                    package_cellar_path = f"{cellar_path}/{package}"

                    if os.path.exists(package_cellar_path):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞
                        size_bytes = self.get_directory_size(package_cellar_path)
                        size_str = self.format_size(size_bytes)
                        package_sizes.append((package, size_str, size_bytes))
                    else:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ brew --prefix
                        try:
                            path_process = subprocess.run(["brew", "--prefix", package],
                                                        capture_output=True, text=True, check=True)
                            package_path = path_process.stdout.strip()

                            if os.path.exists(package_path):
                                size_bytes = self.get_directory_size(package_path)
                                size_str = self.format_size(size_bytes)
                                package_sizes.append((package, size_str, size_bytes))
                        except subprocess.CalledProcessError:
                            # –ü–∞–∫–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–º–ª–∏–Ω–∫–æ–º –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                            continue

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å
                    if (i + 1) % 10 == 0:
                        self.output_queue.put(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{len(packages)} –ø–∞–∫–µ—Ç–æ–≤...\n")

                except subprocess.CalledProcessError:
                    # –ü–∞–∫–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω
                    continue
                except Exception as e:
                    self.output_queue.put(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {package}: {str(e)}\n")
                    continue

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
            package_sizes.sort(key=lambda x: x[2], reverse=True)

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.output_queue.put("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –†–ê–ó–ú–ï–†–û–í:\n")
            self.output_queue.put("=" * 60 + "\n")

            total_bytes = sum(size[2] for size in package_sizes)
            self.output_queue.put(f"üì¶ –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {len(package_sizes)}\n")
            self.output_queue.put(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self.format_size(total_bytes)}\n\n")

            # –¢–æ–ø 20 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
            self.output_queue.put("üîù –¢–û–ü-20 –°–ê–ú–´–• –ë–û–õ–¨–®–ò–• –ü–ê–ö–ï–¢–û–í:\n")
            self.output_queue.put("-" * 60 + "\n")

            for i, (package, size_str, size_bytes) in enumerate(package_sizes[:20]):
                percentage = (size_bytes / total_bytes) * 100 if total_bytes > 0 else 0
                self.output_queue.put(f"{i+1:2d}. {package:<25} {size_str:>8} ({percentage:.1f}%)\n")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
            self.output_queue.put("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ê–ó–ú–ï–†–ê–ú:\n")
            self.output_queue.put("-" * 60 + "\n")

            large_packages = [p for p in package_sizes if p[2] > 100 * 1024 * 1024]  # > 100MB
            medium_packages = [p for p in package_sizes if 10 * 1024 * 1024 < p[2] <= 100 * 1024 * 1024]  # 10-100MB
            small_packages = [p for p in package_sizes if p[2] <= 10 * 1024 * 1024]  # <= 10MB

            self.output_queue.put(f"üî¥ –ë–æ–ª—å—à–∏–µ –ø–∞–∫–µ—Ç—ã (>100MB): {len(large_packages)}\n")
            self.output_queue.put(f"üü° –°—Ä–µ–¥–Ω–∏–µ –ø–∞–∫–µ—Ç—ã (10-100MB): {len(medium_packages)}\n")
            self.output_queue.put(f"üü¢ –ú–∞–ª—ã–µ –ø–∞–∫–µ—Ç—ã (<10MB): {len(small_packages)}\n")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if large_packages:
                self.output_queue.put("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n")
                self.output_queue.put("-" * 60 + "\n")
                self.output_queue.put("üßπ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –±–æ–ª—å—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤\n")
                self.output_queue.put("üì¶ –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'brew cleanup' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π\n")
                if len(large_packages) > 5:
                    self.output_queue.put(f"‚ö†Ô∏è –£ –≤–∞—Å {len(large_packages)} –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª–µ–µ 100MB\n")

        except subprocess.CalledProcessError as e:
            self.output_queue.put(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {str(e)}\n")
        except Exception as e:
            self.output_queue.put(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–æ–≤: {str(e)}\n")
        finally:
            self.output_queue.put("COMMAND_FINISHED")

    def parse_size(self, size_str):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç—ã"""
        size_str = size_str.strip().upper()
        multipliers = {
            'B': 1,
            'K': 1024,
            'M': 1024 * 1024,
            'G': 1024 * 1024 * 1024,
            'T': 1024 * 1024 * 1024 * 1024
        }

        try:
            if size_str[-1] in multipliers:
                number = float(size_str[:-1])
                multiplier = multipliers[size_str[-1]]
                return int(number * multiplier)
            else:
                return int(float(size_str))
        except (ValueError, IndexError):
            return 0

    def get_directory_size(self, path):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –±–∞–π—Ç–∞—Ö"""
        total_size = 0
        try:
            for dirpath, dirnames, filenames in os.walk(path):
                for filename in filenames:
                    filepath = os.path.join(dirpath, filename)
                    try:
                        if os.path.exists(filepath) and not os.path.islink(filepath):
                            total_size += os.path.getsize(filepath)
                    except (OSError, IOError):
                        continue
        except (OSError, IOError):
            return 0
        return total_size

    def format_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if size_bytes == 0:
            return "0B"
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f}{unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f}PB"

    def security_check(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        if self.is_running:
            return

        self.start_progress("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        thread = threading.Thread(target=self.security_check_thread)
        thread.daemon = True
        thread.start()

    def security_check_thread(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.output_queue.put("\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...\n")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            process = subprocess.run(["brew", "list", "--formula"],
                                   capture_output=True, text=True, check=True)
            packages = [pkg.strip() for pkg in process.stdout.strip().split('\n') if pkg.strip()]

            if not packages:
                self.output_queue.put("üì¶ –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n")
                self.output_queue.put("COMMAND_FINISHED")
                return

            self.output_queue.put(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(packages)} –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...\n\n")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã
            self.output_queue.put("üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤...\n")
            try:
                outdated_process = subprocess.run(["brew", "outdated"],
                                                capture_output=True, text=True, check=True)
                outdated_packages = [pkg.strip() for pkg in outdated_process.stdout.strip().split('\n') if pkg.strip()]

                if outdated_packages:
                    self.output_queue.put(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(outdated_packages)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤:\n")
                    for pkg in outdated_packages[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                        self.output_queue.put(f"   üì¶ {pkg}\n")
                    if len(outdated_packages) > 10:
                        self.output_queue.put(f"   ... –∏ –µ—â–µ {len(outdated_packages) - 10} –ø–∞–∫–µ—Ç–æ–≤\n")
                else:
                    self.output_queue.put("‚úÖ –í—Å–µ –ø–∞–∫–µ—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã\n")
            except subprocess.CalledProcessError:
                self.output_queue.put("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã\n")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
            self.output_queue.put("\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...\n")
            vulnerable_packages = self.check_known_vulnerabilities(packages)

            if vulnerable_packages:
                self.output_queue.put(f"üö® –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —É—è–∑–≤–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã:\n")
                for pkg, risk in vulnerable_packages:
                    risk_emoji = "üî¥" if risk == "high" else "üü°" if risk == "medium" else "üü¢"
                    self.output_queue.put(f"   {risk_emoji} {pkg} - —Ä–∏—Å–∫: {risk}\n")
            else:
                self.output_queue.put("‚úÖ –ò–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
            self.output_queue.put("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...\n")
            suspicious_packages = self.check_suspicious_packages(packages)

            if suspicious_packages:
                self.output_queue.put(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:\n")
                for pkg, reason in suspicious_packages:
                    self.output_queue.put(f"   üîç {pkg} - {reason}\n")
            else:
                self.output_queue.put("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            self.output_queue.put("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ Homebrew...\n")
            self.check_homebrew_permissions()

            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self.output_queue.put("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:\n")
            self.output_queue.put("=" * 60 + "\n")

            total_issues = len(outdated_packages) + len(vulnerable_packages) + len(suspicious_packages)

            if total_issues == 0:
                self.output_queue.put("‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n")
            else:
                self.output_queue.put(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {total_issues}\n")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.output_queue.put("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:\n")
            self.output_queue.put("-" * 60 + "\n")
            self.output_queue.put("üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ø–∞–∫–µ—Ç—ã: brew upgrade\n")
            self.output_queue.put("üßπ –£–¥–∞–ª—è–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞–∫–µ—Ç—ã: brew uninstall <package>\n")
            self.output_queue.put("üîç –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤\n")
            self.output_queue.put("üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'brew audit' –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫\n")

            if outdated_packages:
                self.output_queue.put(f"‚ö° –û–±–Ω–æ–≤–∏—Ç–µ {len(outdated_packages)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤\n")

        except subprocess.CalledProcessError as e:
            self.output_queue.put(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {str(e)}\n")
        except Exception as e:
            self.output_queue.put(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {str(e)}\n")
        finally:
            self.output_queue.put("COMMAND_FINISHED")

    def check_known_vulnerabilities(self, packages):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–∫–µ—Ç—ã –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        # –°–ø–∏—Å–æ–∫ –¢–û–ß–ù–û —É—è–∑–≤–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π –ø–∞–∫–µ—Ç–æ–≤
        known_vulnerabilities = {
            'openssl@1.0': 'high',  # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ OpenSSL
            'openssl@1.1': 'medium',
            'python@2': 'high',     # Python 2 –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            'python@2.7': 'high',
            'node@10': 'high',      # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Node.js EOL
            'node@12': 'medium',
            'node@14': 'low',       # –°–∫–æ—Ä–æ EOL
            'mysql@5.6': 'medium',  # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ MySQL
            'mysql@5.7': 'low',
            'postgresql@9': 'medium', # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ PostgreSQL
            'postgresql@10': 'low',
            'imagemagick@6': 'medium', # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ ImageMagick
            'git@2.30': 'medium',   # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Git —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏
            'curl@7.70': 'medium',  # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ curl
        }

        vulnerable = []
        for package in packages:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–µ—Ä—Å–∏–æ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            if package in known_vulnerabilities:
                vulnerable.append((package, known_vulnerabilities[package]))

        return vulnerable

    def check_suspicious_packages(self, packages):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–∫–µ—Ç—ã –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
        suspicious = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–ß–ù–´–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        suspicious_packages = {
            'cryptominer': '–≤–æ–∑–º–æ–∂–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–º–∞–π–Ω–µ—Ä',
            'bitcoin-miner': '–º–∞–π–Ω–µ—Ä –±–∏—Ç–∫–æ–∏–Ω–æ–≤',
            'monero-miner': '–º–∞–π–Ω–µ—Ä Monero',
            'proxy-server': '–ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä',
            'socks-proxy': 'SOCKS –ø—Ä–æ–∫—Å–∏',
            'tor-browser': '–∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Tor',
            'darknet': '–¥–æ—Å—Ç—É–ø –∫ –¥–∞—Ä–∫–Ω–µ—Ç—É',
            'keylogger': '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π —à–ø–∏–æ–Ω',
            'backdoor': '–±—ç–∫–¥–æ—Ä',
            'rootkit': '—Ä—É—Ç–∫–∏—Ç',
        }

        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –Ω–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
        suspicious_patterns = [
            ('mining', '—Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–π–Ω–∏–Ω–≥'),
            ('stealer', '–ø–æ—Ö–æ–∂ –Ω–∞ —Å—Ç–∏–ª–µ—Ä'),
            ('hijack', '–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–∞–π–¥–∂–µ–∫'),
            ('exploit', '—Å–æ–¥–µ—Ä–∂–∏—Ç —ç–∫—Å–ø–ª–æ–π—Ç'),
            ('virus', '–ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –≤–∏—Ä—É—Å'),
        ]

        for package in packages:
            package_lower = package.lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if package_lower in suspicious_packages:
                suspicious.append((package, suspicious_packages[package_lower]))
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —è–≤–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–µ–Ω
                for pattern, reason in suspicious_patterns:
                    if pattern in package_lower:
                        suspicious.append((package, reason))
                        break

        return suspicious

    def check_homebrew_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Homebrew"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Homebrew
            prefix_process = subprocess.run(["brew", "--prefix"],
                                          capture_output=True, text=True, check=True)
            homebrew_prefix = prefix_process.stdout.strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Homebrew
            import pwd
            import stat

            current_user = pwd.getpwuid(os.getuid()).pw_name

            try:
                stat_info = os.stat(homebrew_prefix)
                owner = pwd.getpwuid(stat_info.st_uid).pw_name

                if owner == current_user:
                    self.output_queue.put(f"‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (–≤–ª–∞–¥–µ–ª–µ—Ü: {owner})\n")
                else:
                    self.output_queue.put(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤–ª–∞–¥–µ–ª–µ—Ü Homebrew - {owner}, –∞ –Ω–µ {current_user}\n")
                    self.output_queue.put("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: sudo chown -R $(whoami) $(brew --prefix)/*\n")

            except (OSError, KeyError):
                self.output_queue.put("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Homebrew\n")

        except subprocess.CalledProcessError:
            self.output_queue.put("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ Homebrew\n")
        except Exception as e:
            self.output_queue.put(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {str(e)}\n")

def check_platform():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ macOS"""
    if sys.platform != 'darwin':
        messagebox.showerror("–û—à–∏–±–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
                           "–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è macOS")
        return False
    return True

def main():
    if not check_platform():
        return

    root = tk.Tk()
    app = HomebrewManager(root)
    root.mainloop()

if __name__ == "__main__":
    main()